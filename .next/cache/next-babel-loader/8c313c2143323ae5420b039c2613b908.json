{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\GTL-CC-005\\\\Documents\\\\covid-anchor\\\\web-ui\\\\src\\\\pages\\\\cases.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fetch from \"isomorphic-unfetch\";\nimport { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Case from \"../components/Case\";\n\nfunction Cases() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState({\n    cases: [],\n    isLoading: false\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // Making an API call to cases-api\n\n\n  getCases(function (data) {\n    setState(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        cases: data\n      });\n    });\n  });\n  return __jsx(Layout, {\n    title: \"Cases | Convid Anchor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, \"Cases Page\"), __jsx(\"div\", {\n    className: \"cases\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, state.cases.map(function (item, key) {\n    return __jsx(Case, {\n      key: key,\n      caseData: item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 24\n      }\n    });\n  })));\n}\n\n_s(Cases, \"+NVTKRexIn6UP5ELrgLVDRpO2cM=\");\n\n_c = Cases;\nexport default Cases; // Get Cases\n\nvar Case_API = \"http://localhost:5000\";\n\nfunction getCases(_x) {\n  return _getCases.apply(this, arguments);\n}\n\nfunction _getCases() {\n  _getCases = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(update) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(CASE_API);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n            _context.next = 8;\n            return update(data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getCases.apply(this, arguments);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Cases\");","map":{"version":3,"sources":["C:/Users/GTL-CC-005/Documents/covid-anchor/web-ui/src/pages/cases.js"],"names":["fetch","useState","Layout","Case","Cases","cases","isLoading","state","setState","getCases","data","prev","map","item","key","Case_API","update","CASE_API","response","json"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAAQC,QAAR,QAAsB,OAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAIA,SAASC,KAAT,GAAiB;AAAA;;AAAA;;AAAA,kBACUH,QAAQ,CAAE;AAACI,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,SAAS,EAAE;AAAvB,GAAF,CADlB;AAAA,MACRC,KADQ;AAAA,MACDC,QADC,iBAEjB;;;AACAC,EAAAA,QAAQ,CAAC,UAACC,IAAD,EAAU;AACjBF,IAAAA,QAAQ,CAAC,UAACG,IAAD;AAAA,6CAAeA,IAAf;AAAqBN,QAAAA,KAAK,EAAEK;AAA5B;AAAA,KAAD,CAAR;AACD,GAFO,CAAR;AAME,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACOH,KAAK,CAACF,KAAN,CAAYO,GAAZ,CAAgB,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC5B,WAAO,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,GAAX;AAAgB,MAAA,QAAQ,EAAED,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFA,CADP,CAFF,CADF;AAUD;;GAnBQT,K;;KAAAA,K;AAqBT,eAAeA,KAAf,C,CAEA;;AACA,IAAMW,QAAQ,GAAG,uBAAjB;;SACeN,Q;;;;;uEAAf,iBAAwBO,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyBhB,KAAK,CAACiB,QAAD,CAD9B;;AAAA;AACQC,YAAAA,QADR;AAAA;AAAA,mBAEqBA,QAAQ,CAACC,IAAT,EAFrB;;AAAA;AAEQT,YAAAA,IAFR;AAAA;AAAA,mBAGMM,MAAM,CAACN,IAAD,CAHZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fetch from \"isomorphic-unfetch\";\r\nimport {useState}from \"react\";\r\nimport Layout from \"../components/Layout\";\r\nimport Case from \"../components/Case\";\r\n\r\n\r\n\r\nfunction Cases() {\r\n  const [state, setState] =useState ({cases: [], isLoading: false});\r\n// Making an API call to cases-api\r\ngetCases((data) => {\r\n  setState((prev) => ({...prev, cases: data}));\r\n}\r\n)\r\n\r\n\r\n  return (\r\n    <Layout title=\"Cases | Convid Anchor\">\r\n      <h1>Cases Page</h1>\r\n      <div className=\"cases\">\r\n            {state.cases.map((item, key) => {\r\n                return <Case key={key} caseData={item}/>;\r\n            })}\r\n        </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Cases;\r\n\r\n// Get Cases\r\nconst Case_API = \"http://localhost:5000\";\r\nasync function getCases(update) {\r\n  const response = await fetch(CASE_API);\r\n  const data = await response.json();\r\nawait update(data);\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}